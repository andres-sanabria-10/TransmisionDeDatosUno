{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes con autorangos\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 1),\n          // Desactiva el autorango para X ya que lo manejaremos manualmente\n          autoRange: EAutoRange.Never\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          // Activa el autorango para el eje Y con un poco de padding\n          autoRange: EAutoRange.Always,\n          autoRangePadding: {\n            low: 0.1,\n            high: 0.1\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5 // Un poco más grueso para mejor visibilidad\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          generateStaticData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      generateStaticData();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const generateStaticData = () => {\n    if (!dataSeriesRef.current) return;\n    dataSeriesRef.current.clear();\n\n    // Cálculo adaptativo de puntos según la frecuencia\n    // Para frecuencias altas necesitamos más puntos por ciclo\n    const minPointsPerCycle = 20;\n    const cyclesForDisplay = 5;\n\n    // Para frecuencias muy altas, aumentamos exponencialmente los puntos\n    let pointsPerCycle = minPointsPerCycle;\n    if (params.frecuencia > 100) {\n      pointsPerCycle = minPointsPerCycle * Math.log10(params.frecuencia);\n    }\n    const numPoints = Math.max(1000, Math.round(pointsPerCycle * cyclesForDisplay));\n\n    // Calcular la duración para mostrar un número fijo de ciclos\n    const cycleDuration = 1 / params.frecuencia;\n    const totalDuration = cycleDuration * cyclesForDisplay;\n\n    // Ajustar el rango visible del eje X para mostrar los ciclos correctamente\n    if (xAxisRef.current) {\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, totalDuration);\n    }\n\n    // Generar los datos de la señal\n    for (let i = 0; i < numPoints; i++) {\n      const time = i / numPoints * totalDuration;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      dataSeriesRef.current.append(time, y);\n    }\n\n    // Ajustar dinámicamente el rango Y si la amplitud es muy grande\n    if (yAxisRef.current && params.voltaje > 5) {\n      // Agregar un margen del 20% a la amplitud máxima\n      const yRange = Math.abs(params.voltaje) * 1.2;\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-yRange, yRange);\n    } else if (yAxisRef.current) {\n      // Regresar al rango por defecto para amplitudes pequeñas\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-6, 6);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    },\n    children: !isReady && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#e0e0e0',\n        textAlign: 'center',\n        paddingTop: '150px'\n      },\n      children: \"Cargando osciloscopio...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"EP3c4CePfsunEwMh6Z5qIPX8GpM=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","yAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","EAutoRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","autoRange","Never","yAxis","Always","autoRangePadding","low","high","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","generateStaticData","error","clear","minPointsPerCycle","cyclesForDisplay","pointsPerCycle","Math","log10","numPoints","max","round","cycleDuration","totalDuration","i","time","angularFreq","PI","y","sin","append","yRange","abs","id","ref","style","width","height","backgroundColor","children","textAlign","paddingTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes con autorangos\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 1),\n          // Desactiva el autorango para X ya que lo manejaremos manualmente\n          autoRange: EAutoRange.Never\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          // Activa el autorango para el eje Y con un poco de padding\n          autoRange: EAutoRange.Always,\n          autoRangePadding: { low: 0.1, high: 0.1 }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5 // Un poco más grueso para mejor visibilidad\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n            generateStaticData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n        generateStaticData();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const generateStaticData = () => {\n    if (!dataSeriesRef.current) return;\n\n    dataSeriesRef.current.clear();\n    \n    // Cálculo adaptativo de puntos según la frecuencia\n    // Para frecuencias altas necesitamos más puntos por ciclo\n    const minPointsPerCycle = 20;\n    const cyclesForDisplay = 5;\n    \n    // Para frecuencias muy altas, aumentamos exponencialmente los puntos\n    let pointsPerCycle = minPointsPerCycle;\n    if (params.frecuencia > 100) {\n      pointsPerCycle = minPointsPerCycle * Math.log10(params.frecuencia);\n    }\n    \n    const numPoints = Math.max(1000, Math.round(pointsPerCycle * cyclesForDisplay));\n    \n    // Calcular la duración para mostrar un número fijo de ciclos\n    const cycleDuration = 1 / params.frecuencia;\n    const totalDuration = cycleDuration * cyclesForDisplay;\n    \n    // Ajustar el rango visible del eje X para mostrar los ciclos correctamente\n    if (xAxisRef.current) {\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, totalDuration);\n    }\n    \n    // Generar los datos de la señal\n    for (let i = 0; i < numPoints; i++) {\n      const time = (i / numPoints) * totalDuration;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      dataSeriesRef.current.append(time, y);\n    }\n    \n    // Ajustar dinámicamente el rango Y si la amplitud es muy grande\n    if (yAxisRef.current && params.voltaje > 5) {\n      // Agregar un margen del 20% a la amplitud máxima\n      const yRange = Math.abs(params.voltaje) * 1.2;\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-yRange, yRange);\n    } else if (yAxisRef.current) {\n      // Regresar al rango por defecto para amplitudes pequeñas\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-6, 6);\n    }\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}>\n      {!isReady && (\n        <div style={{ color: '#e0e0e0', textAlign: 'center', paddingTop: '150px' }}>\n          Cargando osciloscopio...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}