{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0); // Se usa para mantener el tiempo actual en la simulación\n\n  // Valores por defecto en caso de que no se proporcionen parámetros\n  const defaultParams = {\n    voltaje: 3,\n    frecuencia: 50,\n    fase: 0\n  };\n\n  // Combinar parámetros proporcionados con valores predeterminados\n  const actualParams = {\n    voltaje: (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined ? params.voltaje : defaultParams.voltaje,\n    frecuencia: (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined ? params.frecuencia : defaultParams.frecuencia,\n    fase: (params === null || params === void 0 ? void 0 : params.fase) !== undefined ? params.fase : defaultParams.fase\n  };\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EllipsePointMarker\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1),\n          autoRange: false\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          autoRange: false\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5,\n          pointMarker: new EllipsePointMarker(wasmContext, {\n            width: 5,\n            height: 5,\n            fill: \"#FF5722\",\n            stroke: \"#FFFFFF\"\n          })\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        // Iniciar la animación en tiempo real\n        startRealTimeAnimation();\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    // Detener la animación actual si existe\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Iniciar una nueva animación con los parámetros actualizados\n    if (isReady && dataSeriesRef.current) {\n      startRealTimeAnimation();\n    }\n  }, [actualParams.voltaje, actualParams.frecuencia, actualParams.fase, isReady]);\n  const startRealTimeAnimation = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n\n    // Inicializar con datos para llenar la pantalla inicial\n    const initialPoints = 100;\n    const pointTime = 0.001; // Tiempo entre puntos (1ms)\n\n    // Reiniciar el offset de tiempo\n    timeOffsetRef.current = 0;\n\n    // Generar datos iniciales\n    for (let i = 0; i < initialPoints; i++) {\n      appendNewDataPoint();\n    }\n\n    // Configurar intervalo para agregar puntos en tiempo real\n    intervalRef.current = setInterval(() => {\n      // Agregar nuevo punto\n      appendNewDataPoint();\n\n      // Actualizar el rango visible para desplazarse con los datos\n      const currentTime = timeOffsetRef.current;\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(Math.max(0, currentTime - 0.1),\n      // Siempre mostrar los últimos 0.1 segundos\n      currentTime);\n    }, 20); // Actualizar aproximadamente a 50 FPS\n  };\n  const appendNewDataPoint = () => {\n    if (!dataSeriesRef.current) return;\n\n    // Incrementar el tiempo\n    timeOffsetRef.current += 0.001; // Incremento de 1ms\n    const currentTime = timeOffsetRef.current;\n\n    // Calcular el valor Y usando la fórmula de onda sinusoidal\n    const angularFreq = 2 * Math.PI * actualParams.frecuencia;\n    const y = actualParams.voltaje * Math.sin(angularFreq * currentTime + actualParams.fase);\n\n    // Agregar el punto a la serie de datos\n    dataSeriesRef.current.append(currentTime, y);\n\n    // Limitar el número de puntos para mantener el rendimiento\n    if (dataSeriesRef.current.count() > 1000) {\n      dataSeriesRef.current.removeAt(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"JRswMxUksQRdr0H+0dlOf60nrpY=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","defaultParams","voltaje","frecuencia","fase","actualParams","undefined","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","EllipsePointMarker","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","autoRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","pointMarker","width","height","fill","renderableSeries","console","log","startRealTimeAnimation","error","clear","initialPoints","pointTime","i","appendNewDataPoint","setInterval","currentTime","Math","max","angularFreq","PI","y","sin","append","count","removeAt","id","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0); // Se usa para mantener el tiempo actual en la simulación\n  \n  // Valores por defecto en caso de que no se proporcionen parámetros\n  const defaultParams = {\n    voltaje: 3,\n    frecuencia: 50,\n    fase: 0\n  };\n\n  // Combinar parámetros proporcionados con valores predeterminados\n  const actualParams = {\n    voltaje: params?.voltaje !== undefined ? params.voltaje : defaultParams.voltaje,\n    frecuencia: params?.frecuencia !== undefined ? params.frecuencia : defaultParams.frecuencia,\n    fase: params?.fase !== undefined ? params.fase : defaultParams.fase\n  };\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EllipsePointMarker\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1),\n          autoRange: false\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          autoRange: false\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5,\n          pointMarker: new EllipsePointMarker(wasmContext, {\n            width: 5,\n            height: 5,\n            fill: \"#FF5722\",\n            stroke: \"#FFFFFF\"\n          })\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        // Iniciar la animación en tiempo real\n        startRealTimeAnimation();\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    // Detener la animación actual si existe\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    \n    // Iniciar una nueva animación con los parámetros actualizados\n    if (isReady && dataSeriesRef.current) {\n      startRealTimeAnimation();\n    }\n  }, [actualParams.voltaje, actualParams.frecuencia, actualParams.fase, isReady]);\n\n  const startRealTimeAnimation = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n    \n    // Inicializar con datos para llenar la pantalla inicial\n    const initialPoints = 100;\n    const pointTime = 0.001; // Tiempo entre puntos (1ms)\n    \n    // Reiniciar el offset de tiempo\n    timeOffsetRef.current = 0;\n    \n    // Generar datos iniciales\n    for (let i = 0; i < initialPoints; i++) {\n      appendNewDataPoint();\n    }\n    \n    // Configurar intervalo para agregar puntos en tiempo real\n    intervalRef.current = setInterval(() => {\n      // Agregar nuevo punto\n      appendNewDataPoint();\n      \n      // Actualizar el rango visible para desplazarse con los datos\n      const currentTime = timeOffsetRef.current;\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(\n        Math.max(0, currentTime - 0.1), // Siempre mostrar los últimos 0.1 segundos\n        currentTime\n      );\n    }, 20); // Actualizar aproximadamente a 50 FPS\n  };\n\n  const appendNewDataPoint = () => {\n    if (!dataSeriesRef.current) return;\n    \n    // Incrementar el tiempo\n    timeOffsetRef.current += 0.001; // Incremento de 1ms\n    const currentTime = timeOffsetRef.current;\n    \n    // Calcular el valor Y usando la fórmula de onda sinusoidal\n    const angularFreq = 2 * Math.PI * actualParams.frecuencia;\n    const y = actualParams.voltaje * Math.sin(angularFreq * currentTime + actualParams.fase);\n    \n    // Agregar el punto a la serie de datos\n    dataSeriesRef.current.append(currentTime, y);\n    \n    // Limitar el número de puntos para mantener el rendimiento\n    if (dataSeriesRef.current.count() > 1000) {\n      dataSeriesRef.current.removeAt(0);\n    }\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}