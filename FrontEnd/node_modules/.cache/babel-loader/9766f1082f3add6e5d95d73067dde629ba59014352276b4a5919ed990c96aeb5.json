{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configure axes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          generateAndSetInitialData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      generateAndSetInitialData();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const generateAndSetInitialData = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Clear existing data\n    dataSeriesRef.current.clear();\n\n    // Reset time offset\n    timeOffsetRef.current = 0;\n\n    // Stop any existing interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Generate initial data - full wave\n    const duration = 0.1; // 100ms window\n    const sampleRate = 10000; // 10,000 samples per second\n    const totalPoints = duration * sampleRate;\n    const timeStep = 1 / sampleRate;\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n    dataSeriesRef.current.appendRange(xValues, yValues);\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, duration);\n\n    // Start animation\n    startAnimation();\n  };\n  const startAnimation = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    const updateInterval = 16; // ~60fps\n    const timeIncrement = 0.01; // Scroll 10ms per frame\n\n    intervalRef.current = setInterval(() => {\n      timeOffsetRef.current += timeIncrement;\n      updateVisibleRange();\n    }, updateInterval);\n  };\n  const updateVisibleRange = () => {\n    if (!xAxisRef.current) return;\n    const windowSize = 0.1; // 100ms window\n    const start = timeOffsetRef.current;\n    const end = start + windowSize;\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(start, end);\n\n    // When we're getting close to the end of our data, generate more\n    if (end >= dataSeriesRef.current.count * (1 / 10000) - 0.05) {\n      appendMoreData();\n    }\n  };\n  const appendMoreData = () => {\n    if (!dataSeriesRef.current) return;\n    const sampleRate = 10000;\n    const timeStep = 1 / sampleRate;\n    const numPoints = 1000; // Add 1000 points at a time (100ms worth)\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const xValues = [];\n    const yValues = [];\n    const startTime = dataSeriesRef.current.count * timeStep;\n    for (let i = 0; i < numPoints; i++) {\n      const time = startTime + i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Prune old data if we have too many points\n    if (dataSeriesRef.current.count > sampleRate * 2) {\n      // Keep 2 seconds of data\n      dataSeriesRef.current.removeRange(0, sampleRate); // Remove 1 second of data\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"JRswMxUksQRdr0H+0dlOf60nrpY=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","generateAndSetInitialData","error","clear","duration","sampleRate","totalPoints","timeStep","xValues","yValues","angularFreq","Math","PI","i","time","y","sin","push","appendRange","startAnimation","updateInterval","timeIncrement","setInterval","updateVisibleRange","windowSize","start","end","count","appendMoreData","numPoints","startTime","removeRange","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configure axes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n          generateAndSetInitialData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n      generateAndSetInitialData();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const generateAndSetInitialData = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Clear existing data\n    dataSeriesRef.current.clear();\n\n    // Reset time offset\n    timeOffsetRef.current = 0;\n\n    // Stop any existing interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Generate initial data - full wave\n    const duration = 0.1; // 100ms window\n    const sampleRate = 10000; // 10,000 samples per second\n    const totalPoints = duration * sampleRate;\n    const timeStep = 1 / sampleRate;\n\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n\n    dataSeriesRef.current.appendRange(xValues, yValues);\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, duration);\n\n    // Start animation\n    startAnimation();\n  };\n\n  const startAnimation = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    const updateInterval = 16; // ~60fps\n    const timeIncrement = 0.01; // Scroll 10ms per frame\n\n    intervalRef.current = setInterval(() => {\n      timeOffsetRef.current += timeIncrement;\n      updateVisibleRange();\n    }, updateInterval);\n  };\n\n  const updateVisibleRange = () => {\n    if (!xAxisRef.current) return;\n\n    const windowSize = 0.1; // 100ms window\n    const start = timeOffsetRef.current;\n    const end = start + windowSize;\n\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(start, end);\n\n    // When we're getting close to the end of our data, generate more\n    if (end >= dataSeriesRef.current.count * (1 / 10000) - 0.05) {\n      appendMoreData();\n    }\n  };\n\n  const appendMoreData = () => {\n    if (!dataSeriesRef.current) return;\n\n    const sampleRate = 10000;\n    const timeStep = 1 / sampleRate;\n    const numPoints = 1000; // Add 1000 points at a time (100ms worth)\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n\n    const xValues = [];\n    const yValues = [];\n\n    const startTime = dataSeriesRef.current.count * timeStep;\n\n    for (let i = 0; i < numPoints; i++) {\n      const time = startTime + (i * timeStep);\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Prune old data if we have too many points\n    if (dataSeriesRef.current.count > sampleRate * 2) { // Keep 2 seconds of data\n      dataSeriesRef.current.removeRange(0, sampleRate); // Remove 1 second of data\n    }\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}