{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0); // Se maneja como referencia en lugar de estado\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2.5\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          startUpdatingData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      startUpdatingData();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const startUpdatingData = () => {\n    if (!dataSeriesRef.current) return;\n    dataSeriesRef.current.clear();\n    timeOffsetRef.current = 0;\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = setInterval(() => {\n      timeOffsetRef.current += 0.001; // Avanza en 1 ms\n      updateLiveData();\n    }, 10); // Actualiza cada 10 ms\n  };\n  const updateLiveData = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n    const numPoints = 10;\n    const newX = [];\n    const newY = [];\n    for (let i = 0; i < numPoints; i++) {\n      const time = timeOffsetRef.current + i * 0.001;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      newX.push(time);\n      newY.push(y);\n    }\n\n    // Agregar nuevos datos y eliminar los más antiguos para mantener una ventana deslizante\n    dataSeriesRef.current.appendRange(newX, newY);\n\n    // Mueve la ventana visible en el tiempo\n    const xMin = timeOffsetRef.current - 0.1; // Retrocede para mostrar los últimos 0.1s\n    const xMax = timeOffsetRef.current;\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(xMin, xMax);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"JRswMxUksQRdr0H+0dlOf60nrpY=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","startUpdatingData","error","clear","setInterval","updateLiveData","numPoints","newX","newY","i","time","angularFreq","Math","PI","y","sin","push","appendRange","xMin","xMax","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0); // Se maneja como referencia en lugar de estado\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2.5\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n          startUpdatingData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n      startUpdatingData();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const startUpdatingData = () => {\n    if (!dataSeriesRef.current) return;\n\n    dataSeriesRef.current.clear();\n    timeOffsetRef.current = 0;\n\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    intervalRef.current = setInterval(() => {\n      timeOffsetRef.current += 0.001; // Avanza en 1 ms\n      updateLiveData();\n    }, 10); // Actualiza cada 10 ms\n  };\n\n  const updateLiveData = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    const numPoints = 10;\n    const newX = [];\n    const newY = [];\n\n    for (let i = 0; i < numPoints; i++) {\n      const time = timeOffsetRef.current + (i * 0.001);\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n\n      newX.push(time);\n      newY.push(y);\n    }\n\n    // Agregar nuevos datos y eliminar los más antiguos para mantener una ventana deslizante\n    dataSeriesRef.current.appendRange(newX, newY);\n\n    // Mueve la ventana visible en el tiempo\n    const xMin = timeOffsetRef.current - 0.1;  // Retrocede para mostrar los últimos 0.1s\n    const xMax = timeOffsetRef.current;\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(xMin, xMax);\n  };\n\n  return (\n    \n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}