{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          initializeWaveform();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      initializeWaveform();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const initializeWaveform = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Detener cualquier animación anterior\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Reiniciar el tiempo\n    timeOffsetRef.current = 0;\n\n    // Generar datos iniciales\n    generateWaveformData();\n\n    // Iniciar la animación continua\n    startContinuousAnimation();\n  };\n  const generateWaveformData = () => {\n    // Limpiar los datos existentes\n    dataSeriesRef.current.clear();\n\n    // Generar 2 segundos de datos para empezar\n    const duration = 2; // 2 segundos de datos\n    const sampleRate = 5000; // 5000 muestras por segundo (balance entre rendimiento y calidad)\n    const totalPoints = duration * sampleRate;\n    const timeStep = 1 / sampleRate;\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Establecer el rango inicial visible\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, 0.1);\n  };\n  const startContinuousAnimation = () => {\n    const updateInterval = 50; // 20 fps, más lento para mejor visualización\n    const timeIncrement = 0.002; // Incremento de tiempo más lento (2ms por frame)\n    const windowSize = 0.1; // Ventana de 100ms\n\n    intervalRef.current = setInterval(() => {\n      // Avanzar el tiempo\n      timeOffsetRef.current += timeIncrement;\n\n      // Actualizar el rango visible\n      const start = timeOffsetRef.current;\n      const end = start + windowSize;\n\n      // Actualizar la ventana visible\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(start, end);\n\n      // Si nos acercamos al final de los datos, generar más\n      if (end >= dataSeriesRef.current.count * (1 / 5000) - 0.2) {\n        appendMoreData();\n      }\n    }, updateInterval);\n  };\n  const appendMoreData = () => {\n    if (!dataSeriesRef.current) return;\n    const sampleRate = 5000;\n    const timeStep = 1 / sampleRate;\n    const numPoints = 5000; // Añadir 1 segundo de datos de una vez\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const xValues = [];\n    const yValues = [];\n    const startTime = dataSeriesRef.current.count * timeStep;\n    for (let i = 0; i < numPoints; i++) {\n      const time = startTime + i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Eliminar datos antiguos si hay demasiados puntos\n    if (dataSeriesRef.current.count > sampleRate * 5) {\n      // Mantener 5 segundos de datos\n      dataSeriesRef.current.removeRange(0, sampleRate); // Eliminar 1 segundo de datos\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"JRswMxUksQRdr0H+0dlOf60nrpY=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","initializeWaveform","error","generateWaveformData","startContinuousAnimation","clear","duration","sampleRate","totalPoints","timeStep","xValues","yValues","angularFreq","Math","PI","i","time","y","sin","push","appendRange","updateInterval","timeIncrement","windowSize","setInterval","start","end","count","appendMoreData","numPoints","startTime","removeRange","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n          initializeWaveform();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n      initializeWaveform();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const initializeWaveform = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Detener cualquier animación anterior\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Reiniciar el tiempo\n    timeOffsetRef.current = 0;\n\n    // Generar datos iniciales\n    generateWaveformData();\n\n    // Iniciar la animación continua\n    startContinuousAnimation();\n  };\n\n  const generateWaveformData = () => {\n    // Limpiar los datos existentes\n    dataSeriesRef.current.clear();\n\n    // Generar 2 segundos de datos para empezar\n    const duration = 2; // 2 segundos de datos\n    const sampleRate = 5000; // 5000 muestras por segundo (balance entre rendimiento y calidad)\n    const totalPoints = duration * sampleRate;\n    const timeStep = 1 / sampleRate;\n\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n\n    dataSeriesRef.current.appendRange(xValues, yValues);\n    \n    // Establecer el rango inicial visible\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(0, 0.1);\n  };\n\n  const startContinuousAnimation = () => {\n    const updateInterval = 50; // 20 fps, más lento para mejor visualización\n    const timeIncrement = 0.002; // Incremento de tiempo más lento (2ms por frame)\n    const windowSize = 0.1; // Ventana de 100ms\n\n    intervalRef.current = setInterval(() => {\n      // Avanzar el tiempo\n      timeOffsetRef.current += timeIncrement;\n      \n      // Actualizar el rango visible\n      const start = timeOffsetRef.current;\n      const end = start + windowSize;\n      \n      // Actualizar la ventana visible\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(start, end);\n      \n      // Si nos acercamos al final de los datos, generar más\n      if (end >= dataSeriesRef.current.count * (1 / 5000) - 0.2) {\n        appendMoreData();\n      }\n    }, updateInterval);\n  };\n\n  const appendMoreData = () => {\n    if (!dataSeriesRef.current) return;\n\n    const sampleRate = 5000;\n    const timeStep = 1 / sampleRate;\n    const numPoints = 5000; // Añadir 1 segundo de datos de una vez\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n\n    const xValues = [];\n    const yValues = [];\n\n    const startTime = dataSeriesRef.current.count * timeStep;\n\n    for (let i = 0; i < numPoints; i++) {\n      const time = startTime + (i * timeStep);\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Eliminar datos antiguos si hay demasiados puntos\n    if (dataSeriesRef.current.count > sampleRate * 5) { // Mantener 5 segundos de datos\n      dataSeriesRef.current.removeRange(0, sampleRate); // Eliminar 1 segundo de datos\n    }\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}