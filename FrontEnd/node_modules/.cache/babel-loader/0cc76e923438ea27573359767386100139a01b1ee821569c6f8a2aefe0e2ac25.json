{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { EllipsePointMarker } from \"scichart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pointMarker = new EllipsePointMarker({\n  width: 5,\n  height: 5,\n  fill: \"red\"\n});\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes con divisiones más pequeñas\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          minorGridLineStyle: {\n            color: \"#222\",\n            strokeThickness: 0.5\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.01),\n          majorDelta: 0.02,\n          minorDelta: 0.01,\n          drawMajorBands: false,\n          drawMinorGridLines: true,\n          drawMajorGridLines: true,\n          autoRange: false\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          minorGridLineStyle: {\n            color: \"#222\",\n            strokeThickness: 0.5\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorDelta: 1,\n          minorDelta: 0.5,\n          drawMinorGridLines: true,\n          autoRange: false\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext, {\n          fifoCapacity: 5000\n        });\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2,\n          pointMarker: {\n            // Deshabilitamos marcadores de puntos para una línea más suave\n            style: {\n              fill: \"transparent\",\n              stroke: \"transparent\"\n            },\n            size: 0\n          }\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        // Añadir modificadores para zoom y pan\n        const zoomPanModifier = new window.SciChart.ZoomPanModifier();\n        const mouseWheelZoomModifier = new window.SciChart.MouseWheelZoomModifier();\n        const zoomExtentsModifier = new window.SciChart.ZoomExtentsModifier();\n        sciChartSurface.chartModifiers.add(zoomPanModifier);\n        sciChartSurface.chartModifiers.add(mouseWheelZoomModifier);\n        sciChartSurface.chartModifiers.add(zoomExtentsModifier);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          startRealTimeUpdates();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      // Detener el intervalo actual si existe\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      // Reiniciar el offset de tiempo\n      timeOffsetRef.current = 0;\n      // Iniciar una nueva actualización en tiempo real con los nuevos parámetros\n      startRealTimeUpdates();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const startRealTimeUpdates = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current || !yAxisRef.current) return;\n\n    // Limpiar datos anteriores\n    dataSeriesRef.current.clear();\n\n    // Ajustar el eje Y para adaptarse a la amplitud de la señal\n    if (yAxisRef.current) {\n      const yRange = Math.max(6, Math.abs(params.voltaje) * 1.2);\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-yRange, yRange);\n    }\n\n    // Configurar el intervalo de tiempo visible\n    const windowSize = 0.2; // 200ms de ventana visible\n\n    // Calcular cuántos puntos necesitamos para ver ciclos completos\n    const cyclesInView = Math.max(2, Math.ceil(windowSize * params.frecuencia));\n    const pointsPerCycle = 100; // Puntos por ciclo para suavidad\n    const pointsPerWindow = cyclesInView * pointsPerCycle;\n\n    // Generamos los datos iniciales\n    const initialXValues = [];\n    const initialYValues = [];\n\n    // Aseguramos que tengamos puntos suficientes, pero no demasiados\n    const totalPoints = Math.min(5000, pointsPerWindow);\n    const timeStep = windowSize / totalPoints;\n    for (let i = 0; i < totalPoints; i++) {\n      const time = timeOffsetRef.current + i * timeStep;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      initialXValues.push(time);\n      initialYValues.push(y);\n    }\n\n    // Añadimos los datos iniciales\n    dataSeriesRef.current.appendRange(initialXValues, initialYValues);\n\n    // Configurar el rango visible inicial\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(timeOffsetRef.current, timeOffsetRef.current + windowSize);\n\n    // Velocidad de actualización (para animar más lento o más rápido)\n    const updateInterval = 16; // ~60 FPS\n    const animationSpeed = 1.0; // Factor de velocidad (1.0 = tiempo real)\n    const timeIncrement = updateInterval / 1000 * animationSpeed;\n\n    // Configurar el intervalo de actualización\n    intervalRef.current = setInterval(() => {\n      if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n      // Incrementar el tiempo\n      timeOffsetRef.current += timeIncrement;\n\n      // Actualizar el rango visible\n      const currentMin = timeOffsetRef.current;\n      const currentMax = currentMin + windowSize;\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(currentMin, currentMax);\n\n      // Calcular cuántos puntos añadir en esta actualización\n      const pointsToAdd = Math.max(1, Math.ceil(totalPoints * timeIncrement / windowSize));\n\n      // Crear los nuevos puntos\n      const newXValues = [];\n      const newYValues = [];\n      for (let i = 0; i < pointsToAdd; i++) {\n        const time = currentMax + i * timeStep;\n        const angularFreq = 2 * Math.PI * params.frecuencia;\n        const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n        newXValues.push(time);\n        newYValues.push(y);\n      }\n\n      // Añadir los nuevos puntos\n      dataSeriesRef.current.appendRange(newXValues, newYValues);\n\n      // Eliminar los puntos antiguos (que ya no están en la vista)\n      const pointsToRemove = Math.min(pointsToAdd, dataSeriesRef.current.count() - totalPoints);\n      if (pointsToRemove > 0) {\n        dataSeriesRef.current.removeRange(0, pointsToRemove);\n      }\n    }, updateInterval);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    },\n    children: !isReady && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#e0e0e0',\n        textAlign: 'center',\n        paddingTop: '150px'\n      },\n      children: \"Cargando osciloscopio...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"EP3c4CePfsunEwMh6Z5qIPX8GpM=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","EllipsePointMarker","jsxDEV","_jsxDEV","pointMarker","width","height","fill","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","yAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","EAutoRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","minorGridLineStyle","tickLabelStyle","visibleRange","majorDelta","minorDelta","drawMajorBands","drawMinorGridLines","drawMajorGridLines","autoRange","yAxis","xAxes","add","yAxes","signalData","fifoCapacity","lineSeries","stroke","dataSeries","style","size","renderableSeries","zoomPanModifier","ZoomPanModifier","mouseWheelZoomModifier","MouseWheelZoomModifier","zoomExtentsModifier","ZoomExtentsModifier","chartModifiers","console","log","voltaje","undefined","frecuencia","fase","startRealTimeUpdates","error","clear","yRange","Math","max","abs","windowSize","cyclesInView","ceil","pointsPerCycle","pointsPerWindow","initialXValues","initialYValues","totalPoints","min","timeStep","i","time","angularFreq","PI","y","sin","push","appendRange","updateInterval","animationSpeed","timeIncrement","setInterval","currentMin","currentMax","pointsToAdd","newXValues","newYValues","pointsToRemove","count","removeRange","id","ref","backgroundColor","children","textAlign","paddingTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { EllipsePointMarker } from \"scichart\";\n\nconst pointMarker = new EllipsePointMarker({\n    width: 5,\n    height: 5,\n    fill: \"red\",\n});\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes con divisiones más pequeñas\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          minorGridLineStyle: { color: \"#222\", strokeThickness: 0.5 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.01),\n          majorDelta: 0.02,\n          minorDelta: 0.01,\n          drawMajorBands: false,\n          drawMinorGridLines: true,\n          drawMajorGridLines: true,\n          autoRange: false\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          minorGridLineStyle: { color: \"#222\", strokeThickness: 0.5 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          majorDelta: 1,\n          minorDelta: 0.5,\n          drawMinorGridLines: true,\n          autoRange: false\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext, { fifoCapacity: 5000 });\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2,\n          pointMarker: {\n            // Deshabilitamos marcadores de puntos para una línea más suave\n            style: { fill: \"transparent\", stroke: \"transparent\" },\n            size: 0\n          }\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        // Añadir modificadores para zoom y pan\n        const zoomPanModifier = new window.SciChart.ZoomPanModifier();\n        const mouseWheelZoomModifier = new window.SciChart.MouseWheelZoomModifier();\n        const zoomExtentsModifier = new window.SciChart.ZoomExtentsModifier();\n        \n        sciChartSurface.chartModifiers.add(zoomPanModifier);\n        sciChartSurface.chartModifiers.add(mouseWheelZoomModifier);\n        sciChartSurface.chartModifiers.add(zoomExtentsModifier);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n          startRealTimeUpdates();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n      // Detener el intervalo actual si existe\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      // Reiniciar el offset de tiempo\n      timeOffsetRef.current = 0;\n      // Iniciar una nueva actualización en tiempo real con los nuevos parámetros\n      startRealTimeUpdates();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const startRealTimeUpdates = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current || !yAxisRef.current) return;\n\n    // Limpiar datos anteriores\n    dataSeriesRef.current.clear();\n\n    // Ajustar el eje Y para adaptarse a la amplitud de la señal\n    if (yAxisRef.current) {\n      const yRange = Math.max(6, Math.abs(params.voltaje) * 1.2);\n      yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-yRange, yRange);\n    }\n\n    // Configurar el intervalo de tiempo visible\n    const windowSize = 0.2; // 200ms de ventana visible\n    \n    // Calcular cuántos puntos necesitamos para ver ciclos completos\n    const cyclesInView = Math.max(2, Math.ceil(windowSize * params.frecuencia));\n    const pointsPerCycle = 100; // Puntos por ciclo para suavidad\n    const pointsPerWindow = cyclesInView * pointsPerCycle;\n    \n    // Generamos los datos iniciales\n    const initialXValues = [];\n    const initialYValues = [];\n    \n    // Aseguramos que tengamos puntos suficientes, pero no demasiados\n    const totalPoints = Math.min(5000, pointsPerWindow);\n    const timeStep = windowSize / totalPoints;\n    \n    for (let i = 0; i < totalPoints; i++) {\n      const time = timeOffsetRef.current + i * timeStep;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      \n      initialXValues.push(time);\n      initialYValues.push(y);\n    }\n    \n    // Añadimos los datos iniciales\n    dataSeriesRef.current.appendRange(initialXValues, initialYValues);\n    \n    // Configurar el rango visible inicial\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(\n      timeOffsetRef.current, \n      timeOffsetRef.current + windowSize\n    );\n    \n    // Velocidad de actualización (para animar más lento o más rápido)\n    const updateInterval = 16; // ~60 FPS\n    const animationSpeed = 1.0; // Factor de velocidad (1.0 = tiempo real)\n    const timeIncrement = (updateInterval / 1000) * animationSpeed;\n    \n    // Configurar el intervalo de actualización\n    intervalRef.current = setInterval(() => {\n      if (!dataSeriesRef.current || !xAxisRef.current) return;\n      \n      // Incrementar el tiempo\n      timeOffsetRef.current += timeIncrement;\n      \n      // Actualizar el rango visible\n      const currentMin = timeOffsetRef.current;\n      const currentMax = currentMin + windowSize;\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(currentMin, currentMax);\n      \n      // Calcular cuántos puntos añadir en esta actualización\n      const pointsToAdd = Math.max(1, Math.ceil(totalPoints * timeIncrement / windowSize));\n      \n      // Crear los nuevos puntos\n      const newXValues = [];\n      const newYValues = [];\n      \n      for (let i = 0; i < pointsToAdd; i++) {\n        const time = currentMax + i * timeStep;\n        const angularFreq = 2 * Math.PI * params.frecuencia;\n        const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n        \n        newXValues.push(time);\n        newYValues.push(y);\n      }\n      \n      // Añadir los nuevos puntos\n      dataSeriesRef.current.appendRange(newXValues, newYValues);\n      \n      // Eliminar los puntos antiguos (que ya no están en la vista)\n      const pointsToRemove = Math.min(pointsToAdd, dataSeriesRef.current.count() - totalPoints);\n      if (pointsToRemove > 0) {\n        dataSeriesRef.current.removeRange(0, pointsToRemove);\n      }\n    }, updateInterval);\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}>\n      {!isReady && (\n        <div style={{ color: '#e0e0e0', textAlign: 'center', paddingTop: '150px' }}>\n          Cargando osciloscopio...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}