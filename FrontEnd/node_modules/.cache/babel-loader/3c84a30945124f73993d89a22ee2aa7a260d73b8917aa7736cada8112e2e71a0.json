{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const bufferRef = useRef([]); // Buffer para almacenar los datos\n\n  const bufferDuration = 300; // 5 minutos en segundos\n  const updateInterval = 100; // Intervalo de actualización en milisegundos (100 ms = 0.1 s)\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, bufferDuration)\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  const generateRealTimeData = () => {\n    if (!dataSeriesRef.current || !params) return;\n    const currentTime = Date.now() / 1000; // Tiempo actual en segundos\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const y = params.voltaje * Math.sin(angularFreq * (currentTime % (1 / params.frecuencia)) + params.fase);\n\n    // Agregar el nuevo punto de datos al buffer\n    bufferRef.current.push({\n      x: currentTime,\n      y\n    });\n\n    // Eliminar datos antiguos (más de 5 minutos)\n    const oldestTime = currentTime - bufferDuration;\n    bufferRef.current = bufferRef.current.filter(point => point.x >= oldestTime);\n\n    // Actualizar la serie de datos en SciChart\n    dataSeriesRef.current.clear();\n    bufferRef.current.forEach(point => {\n      dataSeriesRef.current.append(point.x, point.y);\n    });\n\n    // Ajustar el rango visible del eje X\n    if (xAxisRef.current) {\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(oldestTime, currentTime);\n    }\n  };\n  useEffect(() => {\n    if (!isReady) return;\n\n    // Iniciar el intervalo para actualizar los datos en tiempo real\n    intervalRef.current = setInterval(generateRealTimeData, updateInterval);\n\n    // Limpiar el intervalo cuando el componente se desmonte\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isReady, params]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"OjFZOdR+oouvbhRWZCCDszo5W9c=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","bufferRef","bufferDuration","updateInterval","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","error","generateRealTimeData","currentTime","Date","now","angularFreq","Math","PI","frecuencia","y","voltaje","sin","fase","push","x","oldestTime","filter","point","clear","forEach","append","setInterval","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const bufferRef = useRef([]); // Buffer para almacenar los datos\n\n  const bufferDuration = 300; // 5 minutos en segundos\n  const updateInterval = 100; // Intervalo de actualización en milisegundos (100 ms = 0.1 s)\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, bufferDuration)\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  const generateRealTimeData = () => {\n    if (!dataSeriesRef.current || !params) return;\n\n    const currentTime = Date.now() / 1000; // Tiempo actual en segundos\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const y = params.voltaje * Math.sin(angularFreq * (currentTime % (1 / params.frecuencia)) + params.fase);\n\n    // Agregar el nuevo punto de datos al buffer\n    bufferRef.current.push({ x: currentTime, y });\n\n    // Eliminar datos antiguos (más de 5 minutos)\n    const oldestTime = currentTime - bufferDuration;\n    bufferRef.current = bufferRef.current.filter(point => point.x >= oldestTime);\n\n    // Actualizar la serie de datos en SciChart\n    dataSeriesRef.current.clear();\n    bufferRef.current.forEach(point => {\n      dataSeriesRef.current.append(point.x, point.y);\n    });\n\n    // Ajustar el rango visible del eje X\n    if (xAxisRef.current) {\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(oldestTime, currentTime);\n    }\n  };\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    // Iniciar el intervalo para actualizar los datos en tiempo real\n    intervalRef.current = setInterval(generateRealTimeData, updateInterval);\n\n    // Limpiar el intervalo cuando el componente se desmonte\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isReady, params]);\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}