{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n\n  // Valores por defecto en caso de que no se proporcionen parámetros\n  const defaultParams = {\n    voltaje: 3,\n    frecuencia: 50,\n    fase: 0\n  };\n\n  // Combinar parámetros proporcionados con valores predeterminados\n  const actualParams = {\n    voltaje: (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined ? params.voltaje : defaultParams.voltaje,\n    frecuencia: (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined ? params.frecuencia : defaultParams.frecuencia,\n    fase: (params === null || params === void 0 ? void 0 : params.fase) !== undefined ? params.fase : defaultParams.fase\n  };\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1),\n          autoRange: false\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          autoRange: false\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        // Iniciar la animación en tiempo real\n        startRealTimeAnimation();\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    // Detener la animación actual si existe\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Iniciar una nueva animación con los parámetros actualizados\n    if (isReady && dataSeriesRef.current) {\n      startRealTimeAnimation();\n    }\n  }, [actualParams.voltaje, actualParams.frecuencia, actualParams.fase, isReady]);\n  const startRealTimeAnimation = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n\n    // Reiniciar el offset de tiempo\n    timeOffsetRef.current = 0;\n\n    // Calcular el número de puntos necesarios basado en la frecuencia\n    // Para frecuencias altas, necesitamos más puntos por ciclo\n    const pointsPerCycle = Math.max(100, Math.min(500, actualParams.frecuencia * 10));\n    const duration = 0.1; // Ventana de tiempo de 0.1 segundos\n\n    // Calcular el tiempo entre muestras\n    const sampleTimeIncrement = duration / (pointsPerCycle * (duration * actualParams.frecuencia));\n\n    // Generar datos iniciales para llenar la pantalla\n    generateStaticData();\n\n    // Configurar intervalo para actualizar la visualización\n    intervalRef.current = setInterval(() => {\n      // Mover la ventana visible\n      timeOffsetRef.current += 0.002; // Incrementar el tiempo\n      const currentTime = timeOffsetRef.current;\n\n      // Actualizar el rango visible para desplazarse con los datos\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(currentTime, currentTime + duration);\n\n      // Regenerar los datos para la nueva ventana de tiempo\n      generateWaveformData(currentTime, currentTime + duration);\n    }, 60); // Actualizar aproximadamente a 50 FPS\n  };\n  const generateWaveformData = (startTime, endTime) => {\n    if (!dataSeriesRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n\n    // Calcular cuántos puntos necesitamos basados en la frecuencia\n    // Asegurar suficientes puntos por ciclo para frecuencias altas\n    const minPointsPerCycle = 20; // Mínimo de puntos por ciclo\n    const cyclesInWindow = actualParams.frecuencia * (endTime - startTime);\n    const totalPoints = Math.max(1000, Math.ceil(minPointsPerCycle * cyclesInWindow));\n    const timeStep = (endTime - startTime) / totalPoints;\n\n    // Generar puntos de datos\n    for (let i = 0; i <= totalPoints; i++) {\n      const time = startTime + i * timeStep;\n      const angularFreq = 2 * Math.PI * actualParams.frecuencia;\n      const y = actualParams.voltaje * Math.sin(angularFreq * time + actualParams.fase);\n      dataSeriesRef.current.append(time, y);\n    }\n  };\n  const generateStaticData = () => {\n    if (!dataSeriesRef.current) return;\n    const currentTime = timeOffsetRef.current;\n    generateWaveformData(currentTime, currentTime + 0.1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"JRswMxUksQRdr0H+0dlOf60nrpY=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","intervalRef","isReady","setIsReady","timeOffsetRef","defaultParams","voltaje","frecuencia","fase","actualParams","undefined","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","clearInterval","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","autoRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","startRealTimeAnimation","error","clear","pointsPerCycle","Math","max","min","duration","sampleTimeIncrement","generateStaticData","setInterval","currentTime","generateWaveformData","startTime","endTime","minPointsPerCycle","cyclesInWindow","totalPoints","ceil","timeStep","i","time","angularFreq","PI","y","sin","append","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const timeOffsetRef = useRef(0);\n  \n  // Valores por defecto en caso de que no se proporcionen parámetros\n  const defaultParams = {\n    voltaje: 3,\n    frecuencia: 50,\n    fase: 0\n  };\n\n  // Combinar parámetros proporcionados con valores predeterminados\n  const actualParams = {\n    voltaje: params?.voltaje !== undefined ? params.voltaje : defaultParams.voltaje,\n    frecuencia: params?.frecuencia !== undefined ? params.frecuencia : defaultParams.frecuencia,\n    fase: params?.fase !== undefined ? params.fase : defaultParams.fase\n  };\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1),\n          autoRange: false\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          autoRange: false\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 1.5,\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        // Iniciar la animación en tiempo real\n        startRealTimeAnimation();\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    // Detener la animación actual si existe\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    \n    // Iniciar una nueva animación con los parámetros actualizados\n    if (isReady && dataSeriesRef.current) {\n      startRealTimeAnimation();\n    }\n  }, [actualParams.voltaje, actualParams.frecuencia, actualParams.fase, isReady]);\n\n  const startRealTimeAnimation = () => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n    \n    // Reiniciar el offset de tiempo\n    timeOffsetRef.current = 0;\n    \n    // Calcular el número de puntos necesarios basado en la frecuencia\n    // Para frecuencias altas, necesitamos más puntos por ciclo\n    const pointsPerCycle = Math.max(100, Math.min(500, actualParams.frecuencia * 10));\n    const duration = 0.1; // Ventana de tiempo de 0.1 segundos\n    \n    // Calcular el tiempo entre muestras\n    const sampleTimeIncrement = duration / (pointsPerCycle * (duration * actualParams.frecuencia));\n    \n    // Generar datos iniciales para llenar la pantalla\n    generateStaticData();\n    \n    // Configurar intervalo para actualizar la visualización\n    intervalRef.current = setInterval(() => {\n      // Mover la ventana visible\n      timeOffsetRef.current += 0.002; // Incrementar el tiempo\n      const currentTime = timeOffsetRef.current;\n      \n      // Actualizar el rango visible para desplazarse con los datos\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(\n        currentTime, \n        currentTime + duration\n      );\n      \n      // Regenerar los datos para la nueva ventana de tiempo\n      generateWaveformData(currentTime, currentTime + duration);\n      \n    }, 60); // Actualizar aproximadamente a 50 FPS\n  };\n\n  const generateWaveformData = (startTime, endTime) => {\n    if (!dataSeriesRef.current) return;\n    \n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n    \n    // Calcular cuántos puntos necesitamos basados en la frecuencia\n    // Asegurar suficientes puntos por ciclo para frecuencias altas\n    const minPointsPerCycle = 20; // Mínimo de puntos por ciclo\n    const cyclesInWindow = actualParams.frecuencia * (endTime - startTime);\n    const totalPoints = Math.max(1000, Math.ceil(minPointsPerCycle * cyclesInWindow));\n    \n    const timeStep = (endTime - startTime) / totalPoints;\n    \n    // Generar puntos de datos\n    for (let i = 0; i <= totalPoints; i++) {\n      const time = startTime + (i * timeStep);\n      const angularFreq = 2 * Math.PI * actualParams.frecuencia;\n      const y = actualParams.voltaje * Math.sin(angularFreq * time + actualParams.fase);\n      \n      dataSeriesRef.current.append(time, y);\n    }\n  };\n  \n  const generateStaticData = () => {\n    if (!dataSeriesRef.current) return;\n    \n    const currentTime = timeOffsetRef.current;\n    generateWaveformData(currentTime, currentTime + 0.1);\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}