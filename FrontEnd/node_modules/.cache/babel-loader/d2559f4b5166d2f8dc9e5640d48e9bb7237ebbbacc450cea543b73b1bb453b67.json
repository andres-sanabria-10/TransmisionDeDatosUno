{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1),\n          // Ventana fija de 100ms\n          autoRange: EAutoRange.Never\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          autoRange: EAutoRange.Never\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          initializeData();\n          startRealTimeUpdate();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      // Reiniciar la animación con los nuevos parámetros\n      restartAnimation();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const initializeData = () => {\n    if (!dataSeriesRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n\n    // Generar datos iniciales (un ciclo completo)\n    const windowSize = 0.1; // 100ms\n    const sampleRate = 1000; // 1000 muestras por segundo\n    const totalPoints = windowSize * sampleRate;\n    const timeStep = 1 / sampleRate;\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Configurar la escala del eje Y según el voltaje\n    const maxVoltage = Math.max(6, Math.ceil(params.voltaje));\n    yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-maxVoltage, maxVoltage);\n  };\n  const restartAnimation = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    initializeData();\n    startRealTimeUpdate();\n  };\n  const startRealTimeUpdate = () => {\n    lastTimeRef.current = performance.now() / 1000; // Convertir a segundos\n\n    const updateFrame = () => {\n      const currentTime = performance.now() / 1000;\n      const deltaTime = currentTime - lastTimeRef.current;\n      lastTimeRef.current = currentTime;\n      updateSignal(deltaTime);\n      animationFrameRef.current = requestAnimationFrame(updateFrame);\n    };\n    animationFrameRef.current = requestAnimationFrame(updateFrame);\n  };\n  const updateSignal = deltaTime => {\n    if (!dataSeriesRef.current) return;\n\n    // Parámetros de la señal\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const sampleRate = 1000; // 1000 muestras por segundo\n    const timeStep = 1 / sampleRate;\n    const windowSize = 0.1; // 100ms\n\n    // Obtener los datos actuales\n    const xValues = [];\n    const yValues = [];\n\n    // Desplazar todos los puntos hacia la izquierda\n    for (let i = 0; i < dataSeriesRef.current.count - 1; i++) {\n      xValues.push(dataSeriesRef.current.xValues[i + 1] - timeStep);\n      yValues.push(dataSeriesRef.current.yValues[i + 1]);\n    }\n\n    // Añadir el nuevo punto al final\n    const lastX = windowSize - timeStep;\n    const phase = params.fase + angularFreq * currentTime();\n    const newY = params.voltaje * Math.sin(angularFreq * lastX + phase);\n    xValues.push(lastX);\n    yValues.push(newY);\n\n    // Actualizar la serie de datos\n    dataSeriesRef.current.clear();\n    dataSeriesRef.current.appendRange(xValues, yValues);\n  };\n\n  // Función para obtener el tiempo actual para la fase\n  const currentTime = () => {\n    return performance.now() / 1000;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"Qmvf0J583T/SbxIIIjhiVGjpixc=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","yAxisRef","intervalRef","isReady","setIsReady","animationFrameRef","lastTimeRef","checkReadiness","document","getElementById","window","SciChart","setTimeout","current","delete","cancelAnimationFrame","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","EAutoRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","autoRange","Never","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","initializeData","startRealTimeUpdate","error","restartAnimation","clear","windowSize","sampleRate","totalPoints","timeStep","xValues","yValues","angularFreq","Math","PI","i","time","y","sin","push","appendRange","maxVoltage","max","ceil","performance","now","updateFrame","currentTime","deltaTime","updateSignal","requestAnimationFrame","count","lastX","phase","newY","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const yAxisRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      if (document.getElementById(\"osciloscopio-portadora\") && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange,\n          EAutoRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1), // Ventana fija de 100ms\n          autoRange: EAutoRange.Never\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          autoRange: EAutoRange.Never\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        yAxisRef.current = yAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n            params?.frecuencia !== undefined &&\n            params?.fase !== undefined) {\n          initializeData();\n          startRealTimeUpdate();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n        params?.frecuencia !== undefined && params?.fase !== undefined) {\n      // Reiniciar la animación con los nuevos parámetros\n      restartAnimation();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const initializeData = () => {\n    if (!dataSeriesRef.current) return;\n\n    // Limpiar datos existentes\n    dataSeriesRef.current.clear();\n\n    // Generar datos iniciales (un ciclo completo)\n    const windowSize = 0.1; // 100ms\n    const sampleRate = 1000; // 1000 muestras por segundo\n    const totalPoints = windowSize * sampleRate;\n    const timeStep = 1 / sampleRate;\n\n    const xValues = [];\n    const yValues = [];\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n\n    for (let i = 0; i < totalPoints; i++) {\n      const time = i * timeStep;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      xValues.push(time);\n      yValues.push(y);\n    }\n\n    dataSeriesRef.current.appendRange(xValues, yValues);\n\n    // Configurar la escala del eje Y según el voltaje\n    const maxVoltage = Math.max(6, Math.ceil(params.voltaje));\n    yAxisRef.current.visibleRange = new window.SciChart.NumberRange(-maxVoltage, maxVoltage);\n  };\n\n  const restartAnimation = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    initializeData();\n    startRealTimeUpdate();\n  };\n\n  const startRealTimeUpdate = () => {\n    lastTimeRef.current = performance.now() / 1000; // Convertir a segundos\n    \n    const updateFrame = () => {\n      const currentTime = performance.now() / 1000;\n      const deltaTime = currentTime - lastTimeRef.current;\n      lastTimeRef.current = currentTime;\n      \n      updateSignal(deltaTime);\n      \n      animationFrameRef.current = requestAnimationFrame(updateFrame);\n    };\n    \n    animationFrameRef.current = requestAnimationFrame(updateFrame);\n  };\n\n  const updateSignal = (deltaTime) => {\n    if (!dataSeriesRef.current) return;\n    \n    // Parámetros de la señal\n    const angularFreq = 2 * Math.PI * params.frecuencia;\n    const sampleRate = 1000; // 1000 muestras por segundo\n    const timeStep = 1 / sampleRate;\n    const windowSize = 0.1; // 100ms\n    \n    // Obtener los datos actuales\n    const xValues = [];\n    const yValues = [];\n    \n    // Desplazar todos los puntos hacia la izquierda\n    for (let i = 0; i < dataSeriesRef.current.count - 1; i++) {\n      xValues.push(dataSeriesRef.current.xValues[i + 1] - timeStep);\n      yValues.push(dataSeriesRef.current.yValues[i + 1]);\n    }\n    \n    // Añadir el nuevo punto al final\n    const lastX = windowSize - timeStep;\n    const phase = params.fase + (angularFreq * currentTime());\n    const newY = params.voltaje * Math.sin(angularFreq * lastX + phase);\n    \n    xValues.push(lastX);\n    yValues.push(newY);\n    \n    // Actualizar la serie de datos\n    dataSeriesRef.current.clear();\n    dataSeriesRef.current.appendRange(xValues, yValues);\n  };\n\n  // Función para obtener el tiempo actual para la fase\n  const currentTime = () => {\n    return performance.now() / 1000;\n  };\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}