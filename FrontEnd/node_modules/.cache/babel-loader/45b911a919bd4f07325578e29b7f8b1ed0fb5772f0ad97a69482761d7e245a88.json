{"ast":null,"code":"var _jsxFileName = \"D:\\\\Andres Sanabria\\\\Desktop\\\\10 semestre\\\\Transmision de datos\\\\proyectoV2\\\\TransmisionDeDatos\\\\FrontEnd\\\\src\\\\components\\\\OsciloscopioPortadora.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OsciloscopioPortadora = ({\n  params\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const [timeOffset, setTimeOffset] = useState(0); // Para mover el tiempo\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      const container = document.getElementById(\"osciloscopio-portadora\");\n      if (container && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n    checkReadiness();\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!isReady) return;\n    let isComponentMounted = true;\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n        const {\n          sciChartSurface,\n          wasmContext\n        } = await SciChartSurface.create(\"osciloscopio-portadora\");\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: {\n            color: \"#e0e0e0\"\n          },\n          titleStyle: {\n            color: \"#e0e0e0\"\n          },\n          majorGridLineStyle: {\n            color: \"#333\",\n            strokeThickness: 1\n          },\n          tickLabelStyle: {\n            color: \"#e0e0e0\"\n          }\n        });\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n        const signalData = new XyDataSeries(wasmContext);\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2.5\n        });\n        sciChartSurface.renderableSeries.add(lineSeries);\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n        console.log(\"SciChart Portadora inicializado correctamente\");\n        if ((params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n          startUpdatingData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n    initSciChart();\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n  useEffect(() => {\n    if (dataSeriesRef.current && (params === null || params === void 0 ? void 0 : params.voltaje) !== undefined && (params === null || params === void 0 ? void 0 : params.frecuencia) !== undefined && (params === null || params === void 0 ? void 0 : params.fase) !== undefined) {\n      startUpdatingData();\n    }\n  }, [params === null || params === void 0 ? void 0 : params.voltaje, params === null || params === void 0 ? void 0 : params.frecuencia, params === null || params === void 0 ? void 0 : params.fase]);\n  const startUpdatingData = () => {\n    if (!dataSeriesRef.current) return;\n    dataSeriesRef.current.clear();\n    setTimeOffset(0);\n    const interval = setInterval(() => {\n      setTimeOffset(prevOffset => {\n        const newOffset = prevOffset + 0.001; // Avanza en 1 ms\n        updateLiveData(newOffset);\n        return newOffset;\n      });\n    }, 10); // Actualiza cada 10 ms\n\n    return () => clearInterval(interval);\n  };\n  const MAX_POINTS = 1000; // Límite para evitar acumulación excesiva\n\n  const updateLiveData = offset => {\n    if (!dataSeriesRef.current || !xAxisRef.current) return;\n    const numPoints = 100;\n    const newX = [];\n    const newY = [];\n    for (let i = 0; i < numPoints; i++) {\n      const time = offset + i * 0.001;\n      const angularFreq = 2 * Math.PI * params.frecuencia;\n      const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n      newX.push(time);\n      newY.push(y);\n    }\n\n    // Agregar los nuevos datos\n    dataSeriesRef.current.appendRange(newX, newY);\n\n    // Eliminar puntos antiguos si se supera el máximo\n    if (dataSeriesRef.current.count() > MAX_POINTS) {\n      dataSeriesRef.current.removeRange(0, dataSeriesRef.current.count() - MAX_POINTS);\n    }\n\n    // Deslizar ventana del eje X\n    xAxisRef.current.visibleRange = new window.SciChart.NumberRange(offset - 0.1, offset);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"osciloscopio-portadora\",\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '350px',\n      backgroundColor: '#121212'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(OsciloscopioPortadora, \"QOFKd1WdufnhaI94f4VGyz572q8=\");\n_c = OsciloscopioPortadora;\nexport default OsciloscopioPortadora;\nvar _c;\n$RefreshReg$(_c, \"OsciloscopioPortadora\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OsciloscopioPortadora","params","_s","containerRef","chartRef","dataSeriesRef","xAxisRef","isReady","setIsReady","timeOffset","setTimeOffset","checkReadiness","container","document","getElementById","window","SciChart","setTimeout","current","delete","isComponentMounted","initSciChart","SciChartSurface","NumericAxis","FastLineRenderableSeries","XyDataSeries","NumberRange","sciChartSurface","wasmContext","create","background","xAxis","axisTitle","labelStyle","color","titleStyle","majorGridLineStyle","strokeThickness","tickLabelStyle","visibleRange","yAxis","xAxes","add","yAxes","signalData","lineSeries","stroke","dataSeries","renderableSeries","console","log","voltaje","undefined","frecuencia","fase","startUpdatingData","error","clear","interval","setInterval","prevOffset","newOffset","updateLiveData","clearInterval","MAX_POINTS","offset","numPoints","newX","newY","i","time","angularFreq","Math","PI","y","sin","push","appendRange","count","removeRange","id","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Andres Sanabria/Desktop/10 semestre/Transmision de datos/proyectoV2/TransmisionDeDatos/FrontEnd/src/components/OsciloscopioPortadora.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst OsciloscopioPortadora = ({ params }) => {\n  const containerRef = useRef(null);\n  const chartRef = useRef(null);\n  const dataSeriesRef = useRef(null);\n  const xAxisRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  const [timeOffset, setTimeOffset] = useState(0); // Para mover el tiempo\n\n  useEffect(() => {\n    const checkReadiness = () => {\n      const container = document.getElementById(\"osciloscopio-portadora\");\n      if (container && window.SciChart) {\n        setIsReady(true);\n      } else {\n        setTimeout(checkReadiness, 100);\n      }\n    };\n\n    checkReadiness();\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.delete();\n        chartRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    let isComponentMounted = true;\n\n    const initSciChart = async () => {\n      try {\n        const {\n          SciChartSurface,\n          NumericAxis,\n          FastLineRenderableSeries,\n          XyDataSeries,\n          NumberRange\n        } = window.SciChart;\n\n        const { sciChartSurface, wasmContext } = await SciChartSurface.create(\"osciloscopio-portadora\");\n\n        if (!isComponentMounted) {\n          sciChartSurface.delete();\n          return;\n        }\n\n        sciChartSurface.background = \"#121212\";\n\n        // Configurar ejes\n        const xAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Tiempo (s)\",\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" },\n          visibleRange: new NumberRange(0, 0.1)\n        });\n\n        const yAxis = new NumericAxis(wasmContext, {\n          axisTitle: \"Voltaje (V)\",\n          visibleRange: new NumberRange(-6, 6),\n          labelStyle: { color: \"#e0e0e0\" },\n          titleStyle: { color: \"#e0e0e0\" },\n          majorGridLineStyle: { color: \"#333\", strokeThickness: 1 },\n          tickLabelStyle: { color: \"#e0e0e0\" }\n        });\n\n        sciChartSurface.xAxes.add(xAxis);\n        sciChartSurface.yAxes.add(yAxis);\n\n        const signalData = new XyDataSeries(wasmContext);\n\n        const lineSeries = new FastLineRenderableSeries(wasmContext, {\n          stroke: \"#FF5722\",\n          dataSeries: signalData,\n          strokeThickness: 2.5\n        });\n\n        sciChartSurface.renderableSeries.add(lineSeries);\n\n        chartRef.current = sciChartSurface;\n        dataSeriesRef.current = signalData;\n        xAxisRef.current = xAxis;\n\n        console.log(\"SciChart Portadora inicializado correctamente\");\n\n        if (params?.voltaje !== undefined &&\n          params?.frecuencia !== undefined &&\n          params?.fase !== undefined) {\n          startUpdatingData();\n        }\n      } catch (error) {\n        console.error(\"Error inicializando SciChart Portadora:\", error);\n      }\n    };\n\n    initSciChart();\n\n    return () => {\n      isComponentMounted = false;\n    };\n  }, [isReady]);\n\n  useEffect(() => {\n    if (dataSeriesRef.current && params?.voltaje !== undefined &&\n      params?.frecuencia !== undefined && params?.fase !== undefined) {\n      startUpdatingData();\n    }\n  }, [params?.voltaje, params?.frecuencia, params?.fase]);\n\n  const startUpdatingData = () => {\n    if (!dataSeriesRef.current) return;\n\n    dataSeriesRef.current.clear();\n    setTimeOffset(0);\n\n    const interval = setInterval(() => {\n      setTimeOffset(prevOffset => {\n        const newOffset = prevOffset + 0.001; // Avanza en 1 ms\n        updateLiveData(newOffset);\n        return newOffset;\n      });\n    }, 10); // Actualiza cada 10 ms\n\n    return () => clearInterval(interval);\n  };\n\n  const MAX_POINTS = 1000; // Límite para evitar acumulación excesiva\n\n  const updateLiveData = (offset) => {\n      if (!dataSeriesRef.current || !xAxisRef.current) return;\n  \n      const numPoints = 100;\n      const newX = [];\n      const newY = [];\n  \n      for (let i = 0; i < numPoints; i++) {\n          const time = offset + (i * 0.001);\n          const angularFreq = 2 * Math.PI * params.frecuencia;\n          const y = params.voltaje * Math.sin(angularFreq * time + params.fase);\n          \n          newX.push(time);\n          newY.push(y);\n      }\n  \n      // Agregar los nuevos datos\n      dataSeriesRef.current.appendRange(newX, newY);\n  \n      // Eliminar puntos antiguos si se supera el máximo\n      if (dataSeriesRef.current.count() > MAX_POINTS) {\n          dataSeriesRef.current.removeRange(0, dataSeriesRef.current.count() - MAX_POINTS);\n      }\n  \n      // Deslizar ventana del eje X\n      xAxisRef.current.visibleRange = new window.SciChart.NumberRange(offset - 0.1, offset);\n  };\n  \n\n\n  return (\n    <div id=\"osciloscopio-portadora\" ref={containerRef} style={{ width: '100%', height: '350px', backgroundColor: '#121212' }}></div>\n  );\n};\n\nexport default OsciloscopioPortadora;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}